"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/Earth.jsx":
/*!**********************************!*\
  !*** ./src/components/Earth.jsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ \"(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var _util_getStarfield__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/util/getStarfield */ \"(app-pages-browser)/./src/util/getStarfield.js\");\n/* harmony import */ var _util_getFresnelMat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/util/getFresnelMat */ \"(app-pages-browser)/./src/util/getFresnelMat.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n// Import textures (no need to import directly, just use paths)\nconst EarthScene = ()=>{\n    _s();\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const currentMount = mountRef.current; // Capture mountRef value\n        const w = window.innerWidth * 0.5; // Adjust to match the div width\n        const h = window.innerHeight * 0.8;\n        // Scene, Camera, Renderer Setup\n        const scene = new three__WEBPACK_IMPORTED_MODULE_4__.Scene();\n        const camera = new three__WEBPACK_IMPORTED_MODULE_4__.PerspectiveCamera(44, w / h, 0.1, 1000);\n        camera.position.z = 5;\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_4__.WebGLRenderer({\n            antialias: true\n        });\n        renderer.setSize(w, h);\n        currentMount.appendChild(renderer.domElement); // Use captured value\n        // Tone mapping for better colors\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_4__.ACESFilmicToneMapping;\n        renderer.outputColorSpace = three__WEBPACK_IMPORTED_MODULE_4__.LinearSRGBColorSpace;\n        // Create earth group for organizing\n        const earthGroup = new three__WEBPACK_IMPORTED_MODULE_4__.Group();\n        earthGroup.rotation.z = -23.4 * Math.PI / 180;\n        scene.add(earthGroup);\n        // Controls for zooming, rotating, and panning\n        const controls = new three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_5__.OrbitControls(camera, renderer.domElement);\n        controls.minDistance = 3; // Minimum zoom distance\n        controls.maxDistance = 8; // Maximum zoom distance\n        controls.enableZoom = false; // Disable zooming\n        // Texture loader\n        const loader = new three__WEBPACK_IMPORTED_MODULE_4__.TextureLoader();\n        // Geometry and Materials for Earth\n        const detail = 12;\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_4__.IcosahedronGeometry(1, detail);\n        const earthMaterial = new three__WEBPACK_IMPORTED_MODULE_4__.MeshPhongMaterial({\n            map: loader.load(\"/assets/EarthTexture/00_earthmap1k.jpg\"),\n            specularMap: loader.load(\"/assets/EarthTexture/02_earthspec1k.jpg\"),\n            bumpMap: loader.load(\"/assets/EarthTexture/01_earthbump1k.jpg\"),\n            bumpScale: 0.04\n        });\n        const earthMesh = new three__WEBPACK_IMPORTED_MODULE_4__.Mesh(geometry, earthMaterial);\n        earthGroup.add(earthMesh);\n        // Earth lights for night view\n        const lightsMat = new three__WEBPACK_IMPORTED_MODULE_4__.MeshBasicMaterial({\n            map: loader.load(\"/assets/EarthTexture/03_earthlights1k.jpg\"),\n            blending: three__WEBPACK_IMPORTED_MODULE_4__.AdditiveBlending\n        });\n        const lightsMesh = new three__WEBPACK_IMPORTED_MODULE_4__.Mesh(geometry, lightsMat);\n        earthGroup.add(lightsMesh);\n        // Clouds material\n        const cloudsMat = new three__WEBPACK_IMPORTED_MODULE_4__.MeshStandardMaterial({\n            map: loader.load(\"/assets/EarthTexture/04_earthcloudmap.jpg\"),\n            transparent: true,\n            opacity: 0.8,\n            blending: three__WEBPACK_IMPORTED_MODULE_4__.AdditiveBlending,\n            alphaMap: loader.load(\"/assets/EarthTexture/05_earthcloudmaptrans.jpg\")\n        });\n        const cloudsMesh = new three__WEBPACK_IMPORTED_MODULE_4__.Mesh(geometry, cloudsMat);\n        cloudsMesh.scale.setScalar(1.003);\n        earthGroup.add(cloudsMesh);\n        // Fresnel glow effect for atmosphere\n        const fresnelMat = (0,_util_getFresnelMat__WEBPACK_IMPORTED_MODULE_3__.getFresnelMat)();\n        const glowMesh = new three__WEBPACK_IMPORTED_MODULE_4__.Mesh(geometry, fresnelMat);\n        glowMesh.scale.setScalar(1.01);\n        earthGroup.add(glowMesh);\n        // Add starfield background\n        const stars = (0,_util_getStarfield__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            numStars: 2000\n        });\n        scene.add(stars);\n        // Sunlight to illuminate the Earth\n        const sunLight = new three__WEBPACK_IMPORTED_MODULE_4__.DirectionalLight(0xffffff, 2.0);\n        sunLight.position.set(-2, 0.5, 1.5);\n        scene.add(sunLight);\n        earthGroup.position.set(0, 0.5, 0); // Moves the Earth upwards\n        // Animation loop to rotate the Earth and clouds\n        const animate = ()=>{\n            requestAnimationFrame(animate);\n            earthMesh.rotation.y += 0.002;\n            lightsMesh.rotation.y += 0.002;\n            cloudsMesh.rotation.y += 0.0023;\n            glowMesh.rotation.y += 0.002;\n            stars.rotation.y -= 0.0002;\n            renderer.render(scene, camera);\n        };\n        animate();\n        // Handle window resize for responsiveness\n        const handleWindowResize = ()=>{\n            const newWidth = window.innerWidth * 0.8;\n            const newHeight = window.innerHeight;\n            camera.aspect = newWidth / newHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(newWidth, newHeight);\n        };\n        window.addEventListener(\"resize\", handleWindowResize);\n        // Cleanup on component unmount\n        return ()=>{\n            window.removeEventListener(\"resize\", handleWindowResize);\n            if (currentMount) {\n                currentMount.removeChild(renderer.domElement); // Use captured value\n            }\n            renderer.dispose();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mountRef,\n        className: \"mt-[10vh]\"\n    }, void 0, false, {\n        fileName: \"C:\\\\BIGMAC\\\\bigmac-website\\\\bigmac\\\\src\\\\components\\\\Earth.jsx\",\n        lineNumber: 127,\n        columnNumber: 10\n    }, undefined);\n};\n_s(EarthScene, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = EarthScene;\n/* harmony default export */ __webpack_exports__[\"default\"] = (EarthScene); // \"use client\";\n // import React, { useEffect, useRef } from \"react\";\n // import * as THREE from \"three\";\n // import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n // import getStarfield from \"@/util/getStarfield\";\n // import { getFresnelMat } from \"@/util/getFresnelMat\";\n // const EarthScene = () => {\n //   const mountRef = useRef(null);\n //   useEffect(() => {\n //     const currentMount = mountRef.current;\n //     const w = window.innerWidth * 0.5;\n //     const h = window.innerHeight * 0.8;\n //     const scene = new THREE.Scene();\n //     const camera = new THREE.PerspectiveCamera(44, w / h, 0.1, 1000);\n //     camera.position.z = 5;\n //     const renderer = new THREE.WebGLRenderer({ antialias: true });\n //     renderer.setSize(w, h);\n //     currentMount.appendChild(renderer.domElement);\n //     renderer.toneMapping = THREE.ACESFilmicToneMapping;\n //     renderer.outputColorSpace = THREE.LinearSRGBColorSpace;\n //     const earthGroup = new THREE.Group();\n //     earthGroup.rotation.z = (-23.4 * Math.PI) / 180;\n //     scene.add(earthGroup);\n //     const controls = new OrbitControls(camera, renderer.domElement);\n //     controls.minDistance = 3;\n //     controls.maxDistance = 8;\n //     controls.enableZoom = false;\n //     const loader = new THREE.TextureLoader();\n //     const detail = 12;\n //     const geometry = new THREE.IcosahedronGeometry(1, detail);\n //     const earthMaterial = new THREE.MeshPhongMaterial({\n //       map: loader.load(\"/assets/EarthTexture/00_earthmap1k.jpg\"),\n //       specularMap: loader.load(\"/assets/EarthTexture/02_earthspec1k.jpg\"),\n //       bumpMap: loader.load(\"/assets/EarthTexture/01_earthbump1k.jpg\"),\n //       bumpScale: 0.04,\n //     });\n //     const earthMesh = new THREE.Mesh(geometry, earthMaterial);\n //     earthGroup.add(earthMesh);\n //     const lightsMat = new THREE.MeshBasicMaterial({\n //       map: loader.load(\"/assets/EarthTexture/03_earthlights1k.jpg\"),\n //       blending: THREE.AdditiveBlending,\n //     });\n //     const lightsMesh = new THREE.Mesh(geometry, lightsMat);\n //     earthGroup.add(lightsMesh);\n //     const cloudsMat = new THREE.MeshStandardMaterial({\n //       map: loader.load(\"/assets/EarthTexture/04_earthcloudmap.jpg\"),\n //       transparent: true,\n //       opacity: 0.8,\n //       blending: THREE.AdditiveBlending,\n //       alphaMap: loader.load(\"/assets/EarthTexture/05_earthcloudmaptrans.jpg\"),\n //     });\n //     const cloudsMesh = new THREE.Mesh(geometry, cloudsMat);\n //     cloudsMesh.scale.setScalar(1.003);\n //     earthGroup.add(cloudsMesh);\n //     const fresnelMat = getFresnelMat();\n //     const glowMesh = new THREE.Mesh(geometry, fresnelMat);\n //     glowMesh.scale.setScalar(1.01);\n //     earthGroup.add(glowMesh);\n //     const stars = getStarfield({ numStars: 2000 });\n //     scene.add(stars);\n //     const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\n //     sunLight.position.set(-2, 0.5, 1.5);\n //     scene.add(sunLight);\n //     earthGroup.position.set(0, 0.5, 0);\n //     const animate = () => {\n //       requestAnimationFrame(animate);\n //       earthMesh.rotation.y += 0.002;\n //       lightsMesh.rotation.y += 0.002;\n //       cloudsMesh.rotation.y += 0.0023;\n //       glowMesh.rotation.y += 0.002;\n //       stars.rotation.y -= 0.0002;\n //       renderer.render(scene, camera);\n //     };\n //     animate();\n //     const handleWindowResize = () => {\n //       const newWidth = window.innerWidth * 0.8;\n //       const newHeight = window.innerHeight;\n //       camera.aspect = newWidth / newHeight;\n //       camera.updateProjectionMatrix();\n //       renderer.setSize(newWidth, newHeight);\n //     };\n //     window.addEventListener(\"resize\", handleWindowResize);\n //     return () => {\n //       window.removeEventListener(\"resize\", handleWindowResize);\n //       if (currentMount) {\n //         currentMount.removeChild(renderer.domElement);\n //       }\n //       renderer.dispose();\n //     };\n //   }, []);\n //   return <div ref={mountRef} className=\"mt-[10vh]\" />;\n // };\n // export default EarthScene;\nvar _c;\n$RefreshReg$(_c, \"EarthScene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Earth.jsx\n"));

/***/ })

});